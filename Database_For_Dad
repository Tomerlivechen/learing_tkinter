# -*- coding: utf-8 -*-
"""
Created on Sat Dec  2 17:03:26 2023

@author: tomer
"""
from tkinter import *
from tkinter import ttk
from datetime import datetime
import os
import uuid
import csv
import numpy as np
global database_path
global internal_database
global loaded_database
global catagory_name_array
global catagory_lable_array
global report_type

catagory_name_array = ["ID", "Cat1", "Cat2", "Item", "Amount", "Min"]
catagory_lable_array = ["This is the lable for catagory #1", "This is the lable for catagory #2",
                        "Name of item", "Current amount of items:", "Minimum amount of items:"]

internal_database = [catagory_name_array]


def disable_buttons(button_name_array):
    for button in button_name_array:
        button.config(state=DISABLED)


def enable_buttons(button_name_array):
    for button in button_name_array:
        button.config(state=NORMAL)

  # Load the database to internal storage


def sort_and_remove_duplicates(matrix):
    # Sort the matrix by columns
    sorted_matrix = sorted(matrix[1:], key=lambda row: (
        row[1], row[2], row[3], row[4]))
    # Remove duplicate rows
    unique_matrix = [sorted_matrix[0]]
    for i in range(1, len(sorted_matrix)):
        if tuple(sorted_matrix[i]) != tuple(sorted_matrix[i - 1]):
            unique_matrix.append(sorted_matrix[i])

    sorted_matrix_with_header = [matrix[0]] + unique_matrix
    return sorted_matrix_with_header


def load_csv_to_matrix(append):
    global database_path
    global internal_database
    global catagory_name_array
    if not append:
        internal_database = [catagory_name_array]
    try:
        with open(database_path, 'r') as csv_file:
            csv_reader = csv.reader(csv_file)

        # Skip the header row
            if append:
                next(csv_reader)

            for row in csv_reader:
                internal_database.append(row)
    except StopIteration:
        pass


def patch_remove_header():
    global internal_database
    global catagory_name_array
    internal_database = [
        row for row in internal_database if row != catagory_name_array]

# save the internal database to hard drive storage


def save_csv_to_drive(delete):
    global database_path
    global internal_database
    if not delete:
        load_csv_to_matrix(True)
    internal_database = sort_and_remove_duplicates(internal_database)
#    with open(database_path, 'w', newline='') as csv_file:
#       csv_writer = csv.writer(csv_file)
#        csv_writer.writerows(internal_database)
    header = internal_database[0]
    data = internal_database[1:]

    with open(database_path, 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerow(header)
        csv_writer.writerows(data)


# check if path exists


def file_exists_or_create():
    global database_path
    if os.path.exists(database_path):
        load_csv_to_matrix(False)
        return True
    else:
        with open(database_path, 'w', newline=''):
            messagebox.showinfo(title="Database created",
                                message="Database has been created")
            # Create an empty CSV file
            pass
        return False


def entery_test(entry_array, window_focus):
    count = 0
    for entry_widget in entry_array:
        if len(entry_widget) != 0:
            count += 1
    if count < len(entry_array):
        messagebox.showinfo(title="Empty catagories",
                            message="You seem to have missed some of the catagories")
        window_focus.focus_set()

    if not entry_array[3].isnumeric() or not entry_array[4].isnumeric():
        messagebox.showinfo(title="Value Error",
                            message="Amount values must be numeric")
        window_focus.focus_set()
        return False
    return True


def enter_to_storage(entry_array, entry_widgets, window_focus):
    global internal_database
    global report_text
    # check if all catagories are filled
    if entery_test(entry_array, window_focus):

        # Clear Entry widget values
        for entry_widget in entry_widgets:
            entry_widget.delete(0, 'end')
        # Generate a unique random ID
        unique_id = str(uuid.uuid4())
        entry_array = [unique_id] + entry_array
        internal_database.append(entry_array)
        report_text.config(state=NORMAL)
        report_text.insert(
            END, f'{entry_array[0]}\t\t\t\t\t{entry_array[1]}\t{entry_array[2]}\t{entry_array[3]}\t{entry_array[4]}\t{entry_array[5]}\n')
        report_text.config(state=DISABLED)
#        messagebox.showinfo(title="Entery Saved",
#                        message="Entry temporarily saved")
        Input_window.focus_set()


def enter_to_drive(delete, window_focus):
    save_csv_to_drive(delete)
    messagebox.showinfo(title="Entery Saved",
                        message="List saved to hard drive")
    window_focus.focus_set()


def on_scroll(text_name, *args):
    text_name.yview(*args)


def open_Input_window(button_name_array):
    # Create the window
    global Input_window
    global internal_database
    global catagory_name_array
    global catagory_lable_array
    global report_text
    Input_window = Toplevel(root)
    Input_window.title("Input window")
    Input_window.geometry("860x460")
    # Disable the button in the main window
    disable_buttons(button_name_array)
    Input_window.protocol("WM_DELETE_WINDOW",
                          lambda: on_new_window_close(Input_window, button_name_array))
    # Creat widgets for window
    label = Label(Input_window, text="This is Input window")
    label_Cat1 = Label(Input_window, text=catagory_lable_array[0])
    label_Cat2 = Label(Input_window, text=catagory_lable_array[1])
    label_Cat3 = Label(Input_window, text=catagory_lable_array[2])
    label_Cat4 = Label(Input_window, text=catagory_lable_array[3])
    label_Cat5 = Label(Input_window, text=catagory_lable_array[4])
    entry_Cat1 = Entry(Input_window, width=20)
    entry_Cat2 = Entry(Input_window, width=20)
    entry_Cat3 = Entry(Input_window, width=20)
    entry_Cat4 = Entry(Input_window, width=20)
    entry_Cat5 = Entry(Input_window, width=20)
    button_Enter = Button(Input_window, text="Enter",
                          command=lambda: enter_to_storage([entry_Cat1.get(), entry_Cat2.get(), entry_Cat3.get(), entry_Cat4.get(), entry_Cat5.get()], [entry_Cat1, entry_Cat2, entry_Cat3, entry_Cat4, entry_Cat5], Input_window))
    button_Save = Button(Input_window, text="Save",
                         command=lambda: enter_to_drive(False, Input_window))
    report_text = Text(Input_window, borderwidth=5, bd=3,
                       bg="gray", width=80, height=15, font=('Courier', 12))
    report_text.insert(
        "1.0", f'{catagory_name_array[0]}\t\t\t\t\t{catagory_name_array[1]}\t{catagory_name_array[2]}\t{catagory_name_array[3]}\t{catagory_name_array[4]}\t{catagory_name_array[5]}\n')
    report_text.config(state=DISABLED)
    scrollbar = Scrollbar(Input_window, command=on_scroll(report_text))
    report_text.config(yscrollcommand=scrollbar.set)
    # Place widgets in window
    count_row = 0
    count_col = 0
    label.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    label_Cat1.grid(row=count_row, column=0)
    entry_Cat1.grid(row=count_row, column=1)
    count_row += 1
    label_Cat2.grid(row=count_row, column=0)
    entry_Cat2.grid(row=count_row, column=1)
    count_row += 1
    label_Cat3.grid(row=count_row, column=0)
    entry_Cat3.grid(row=count_row, column=1)
    count_row += 1
    label_Cat4.grid(row=count_row, column=0)
    entry_Cat4.grid(row=count_row, column=1)
    count_row += 1
    label_Cat5.grid(row=count_row, column=0)
    entry_Cat5.grid(row=count_row, column=1)
    count_row += 1
    button_Enter.grid(row=count_row, column=0)
    button_Save.grid(row=count_row, column=1)
    count_row += 1
    report_text.grid(row=count_row, column=0, columnspan=3)
    scrollbar.grid(row=count_row, column=3, sticky="ns")


def extract_column(matrix, column_index):
    return list(set(row[column_index] for row in matrix[1:]))


def set_catagory_values():
    global internal_database
    cat1_unique_Values = extract_column(internal_database, 1)
    cat2_unique_Values = extract_column(internal_database, 2)
    cat3_unique_Values = extract_column(internal_database, 3)
    cat4_unique_Values = extract_column(internal_database, 4)
    cat_values = [cat1_unique_Values, cat2_unique_Values,
                  cat3_unique_Values, cat4_unique_Values,]
    return cat_values


def report_naming(name):
    global report_type
    report_type = name


def search_in_internal_database(combo_values, text_name):
    global internal_database
    global catagory_name_array
    internal_database_array = np.array(internal_database[1:])
    counter = 1
    filter_values = [None] * (len(combo_values)+1)
    for values in combo_values:
        if len(values) > 0:
            filter_values[counter] = values
        else:
            filter_values[counter] = None
        counter += 1
    # Create a boolean mask for each column
    mask = [internal_database_array[:, i] == value if value is not None else np.full(
        internal_database_array.shape[0], True) for i, value in enumerate(filter_values)]
    # Combine masks using logical AND to get the final filter
    final_mask = np.all(mask, axis=0)
    # Apply the filter to the original matrix
    filtered_array = internal_database_array[final_mask]
    write_on_text(filtered_array, text_name)


def write_on_text(filtered_array, text_name):
    patch_remove_header()
    text_name.config(state=NORMAL)
    text_name.delete('1.0', END)
    text_name.insert(
        "1.0", f'{catagory_name_array[0]}\t\t\t\t\t{catagory_name_array[1]}\t{catagory_name_array[2]}\t{catagory_name_array[3]}\t{catagory_name_array[4]}\t{catagory_name_array[5]}\n')
    for i in range(len(filtered_array)):
        for j in range(6):
            if j >= 1:
                text_name.insert(END, f'{filtered_array[i][j]}\t')
            else:
                text_name.insert(END, f'{filtered_array[i][j]}\t\t\t\t\t')
#        text_name.insert(END, f'\n')
    text_name.config(state=DISABLED)


def delete_entry(item_id, replace, window_focus):
    global internal_database
    flag = 0
    for row in internal_database:
        if row[0] == item_id:
            internal_database.remove(row)
            flag = 1
            if not replace:
                messagebox.showinfo(title="Item deleted",
                                    message="Item deleted")
            break
    if flag == 0:
        messagebox.showerror(title="ID not found", message="ID not found")


def find_item(item_id):
    global internal_database
    for row in internal_database:
        if row[0] == item_id:
            return row


def open_Edit_window(button_name_array):
    global catagory_name_array
    global internal_database
    global search_text
    global catagory_lable_array
    Edit_window = Toplevel(root)
    Edit_window.title("Edit_window")
    Edit_window.geometry("840x500")
    disable_buttons(button_name_array)
    Edit_window.protocol("WM_DELETE_WINDOW",
                         lambda: on_new_window_close(Edit_window, button_name_array))
    # Creat widgets for window
    label = Label(Edit_window, text="This is Edit window")
    label_Cat1 = Label(Edit_window, text=catagory_lable_array[0])
    label_Cat2 = Label(Edit_window, text=catagory_lable_array[1])
    label_Cat3 = Label(Edit_window, text=catagory_lable_array[2])
    label_Cat4 = Label(Edit_window, text=catagory_lable_array[3])
    label_Cat5 = Label(Edit_window, text=catagory_lable_array[4])
    cat_Values = set_catagory_values()
    combo_Cat1 = ttk.Combobox(Edit_window, values=cat_Values[0])
    combo_Cat2 = ttk.Combobox(Edit_window, values=cat_Values[1])
    combo_Cat3 = ttk.Combobox(Edit_window, values=cat_Values[2])
    combo_Cat4 = ttk.Combobox(Edit_window, values=cat_Values[3])

    search_button = Button(Edit_window, text="Search",
                           command=lambda: search_in_internal_database([combo_Cat1.get(), combo_Cat2.get(), combo_Cat3.get(), combo_Cat4.get()], search_text))
    search_text = Text(Edit_window, borderwidth=5, bd=3,
                       bg="gray", width=80, height=15, font=('Courier', 12))
    search_text.insert(
        "1.0", f'{catagory_name_array[0]}\t\t\t\t\t{catagory_name_array[1]}\t{catagory_name_array[2]}\t{catagory_name_array[3]}\t{catagory_name_array[4]}\t{catagory_name_array[5]}\n')
    scrollbar = Scrollbar(Edit_window, command=on_scroll(search_text))
    search_text.config(yscrollcommand=scrollbar.set)
    label_edit = Label(Edit_window, text="Enter the ID if the item to edit")
    id_to_edit_entry = Entry(Edit_window, width=40)
    delete_button = Button(Edit_window, text="Delete",
                           command=lambda: delete_entry(id_to_edit_entry.get(), False, Edit_window))
    edit_button = Button(Edit_window, text="Edit",
                         command=lambda: open_edit_tab(id_to_edit_entry.get(), [delete_button, edit_button, save_button]))
    save_button = Button(Edit_window, text="Save",
                         command=lambda: enter_to_drive(True, Edit_window))
    # Place widgets in window
    count_row = 0
    label.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    label_Cat1.grid(row=count_row, column=0)
    combo_Cat1.grid(row=count_row, column=1)
    count_row += 1
    label_Cat2.grid(row=count_row, column=0)
    combo_Cat2.grid(row=count_row, column=1)
    count_row += 1
    label_Cat3.grid(row=count_row, column=0)
    combo_Cat3.grid(row=count_row, column=1)
    count_row += 1
    label_Cat4.grid(row=count_row, column=0)
    combo_Cat4.grid(row=count_row, column=1)
    count_row += 1
    search_button.grid(row=count_row, column=0)
    count_row += 1
    search_text.grid(row=count_row, column=0, columnspan=6)
    scrollbar.grid(row=count_row, column=6, sticky="ns")
    count_row += 1
    label_edit.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    id_to_edit_entry.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    edit_button.grid(row=count_row, column=0)
    delete_button.grid(row=count_row, column=1)
    save_button.grid(row=count_row, column=2)


def open_edit_tab(item_id, button_name_array):
    global internal_database
    global catagory_lable_array
    Edit_tab = Toplevel(root)
    Edit_tab.title("Edit tab")
    Edit_tab.geometry("300x160")
    disable_buttons(button_name_array)
    Edit_tab.protocol("WM_DELETE_WINDOW",
                      lambda: on_new_window_close(Edit_tab, button_name_array))
    item_data = find_item(item_id)
    # Creat widgets for window
    label = Label(Edit_tab, text="This is Edit item window")
    label_Cat1 = Label(Edit_tab, text=catagory_lable_array[0])
    label_Cat2 = Label(Edit_tab, text=catagory_lable_array[1])
    label_Cat3 = Label(Edit_tab, text=catagory_lable_array[2])
    label_Cat4 = Label(Edit_tab, text=catagory_lable_array[3])
    label_Cat5 = Label(Edit_tab, text=catagory_lable_array[4])
    entry_Cat1 = Entry(Edit_tab, width=20)
    entry_Cat2 = Entry(Edit_tab, width=20)
    entry_Cat3 = Entry(Edit_tab, width=20)
    entry_Cat4 = Entry(Edit_tab, width=20)
    entry_Cat5 = Entry(Edit_tab, width=20)
    entry_Cat1.insert(0, item_data[1])
    entry_Cat2.insert(0, item_data[2])
    entry_Cat3.insert(0, item_data[3])
    entry_Cat4.insert(0, item_data[4])
    entry_Cat5.insert(0, item_data[5])
    save_button = Button(Edit_tab, text="Save", command=lambda: edit_tab_save(item_id, [
                         entry_Cat1.get(), entry_Cat2.get(), entry_Cat3.get(), entry_Cat4.get(), entry_Cat5.get()], Edit_tab))
    # Place widgets in window
    count_row = 0
    label.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    label_Cat1.grid(row=count_row, column=0)
    entry_Cat1.grid(row=count_row, column=1)
    count_row += 1
    label_Cat2.grid(row=count_row, column=0)
    entry_Cat2.grid(row=count_row, column=1)
    count_row += 1
    label_Cat3.grid(row=count_row, column=0)
    entry_Cat3.grid(row=count_row, column=1)
    count_row += 1
    label_Cat4.grid(row=count_row, column=0)
    entry_Cat4.grid(row=count_row, column=1)
    count_row += 1
    label_Cat5.grid(row=count_row, column=0)
    entry_Cat5.grid(row=count_row, column=1)
    count_row += 1
    save_button.grid(row=count_row, column=1)


def edit_tab_save(item_id, entry_array, window_focus):
    global internal_database
    if entery_test(entry_array, window_focus):
        delete_entry(item_id, True)
        entry_array = [item_id] + entry_array
        internal_database.append(entry_array)
        enter_to_drive(True, Edit_tab)
        window_focus.destroy()


def under_min_button_action(text_name, report_name):
    global internal_database
    filtered_rows = [row for row in internal_database if row[-1] > row[-2]]
    write_on_text(filtered_rows, text_name)
    report_naming(report_name)


def filter_button_action(combo_values, text_name, report_name):
    search_in_internal_database(combo_values, text_name)
    report_naming(report_name)


def full_report_button_action(database, text_name, report_name):
    write_on_text(database, text_name)
    report_naming(report_name)


def open_Output_window(button_name_array):
    global report_text
    global internal_database
    global catagory_lable_array
    Output_window = Toplevel(root)
    Output_window.title("Output window")
    Output_window.geometry("840x500")

    label = Label(Output_window, text="This is Output window")
    disable_buttons(button_name_array)
    Output_window.protocol("WM_DELETE_WINDOW",
                           lambda: on_new_window_close(Output_window, button_name_array))
    label_custome = Label(Output_window, text="This is custome output")
    label_Cat1 = Label(Output_window, text=catagory_lable_array[0])
    label_Cat2 = Label(Output_window, text=catagory_lable_array[1])
    label_Cat3 = Label(Output_window, text=catagory_lable_array[2])
    label_Cat4 = Label(Output_window, text=catagory_lable_array[3])
    label_Cat5 = Label(Output_window, text=catagory_lable_array[4])
    cat_Values = set_catagory_values()
    combo_Cat1 = ttk.Combobox(Output_window, values=cat_Values[0])
    combo_Cat2 = ttk.Combobox(Output_window, values=cat_Values[1])
    combo_Cat3 = ttk.Combobox(Output_window, values=cat_Values[2])
    combo_Cat4 = ttk.Combobox(Output_window, values=cat_Values[3])

    filter_button = Button(Output_window, text="Filter",
                           command=lambda: filter_button_action([combo_Cat1.get(), combo_Cat2.get(), combo_Cat3.get(), combo_Cat4.get()], report_text, "Custom_report"))
    full_report_button = Button(Output_window, text="Full report",
                                command=lambda: full_report_button_action(internal_database, report_text, "Full_report"))
    under_min_button = Button(Output_window, text="Under Min report",
                              command=lambda: under_min_button_action(report_text, "Under_Min"))
    Export_button = Button(Output_window, text="Export",
                           command=lambda: export_report(report_text))
    report_text = Text(Output_window, borderwidth=5, bd=3,
                       bg="gray", width=80, height=15, font=('Courier', 12))
    report_text.insert(
        "1.0", f'{catagory_name_array[0]}\t\t\t\t\t{catagory_name_array[1]}\t{catagory_name_array[2]}\t{catagory_name_array[3]}\t{catagory_name_array[4]}\t{catagory_name_array[5]}\n')
    scrollbar = Scrollbar(Output_window, command=on_scroll(report_text))
    report_text.config(yscrollcommand=scrollbar.set)

    # Place widgets in window
    count_row = 0
    label.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    label_custome.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    label_Cat1.grid(row=count_row, column=0)
    combo_Cat1.grid(row=count_row, column=1)
    count_row += 1
    label_Cat2.grid(row=count_row, column=0)
    combo_Cat2.grid(row=count_row, column=1)
    count_row += 1
    label_Cat3.grid(row=count_row, column=0)
    combo_Cat3.grid(row=count_row, column=1)
    count_row += 1
    label_Cat4.grid(row=count_row, column=0)
    combo_Cat4.grid(row=count_row, column=1)
    count_row += 1
    filter_button.grid(row=count_row, column=0)
    under_min_button.grid(row=count_row, column=1)
    full_report_button.grid(row=count_row, column=3)
    count_row += 1
    report_text.grid(row=count_row, column=0, columnspan=6)
    scrollbar.grid(row=count_row, column=6, sticky="ns")
    count_row += 1
    Export_button.grid(row=count_row, column=0)


TODO


def export_report(report_text):
    global database_path
    global internal_database
    global report_type
    export_path = database_path[:-4]
    current_datetime = datetime.now()
    formatted_datetime = current_datetime.strftime("%Y-%m-%d %H_%M_%S")
    export_path += report_type+"_"+formatted_datetime+".txt"
    text_content = report_text.get("1.0", END)
    with open(export_path, 'w') as file:
        file.write(str(internal_database))


def on_new_window_close(window_name, button_name_array):
    # Enable the button in the main window when the new window is closed
    enable_buttons(button_name_array)
    window_name.destroy()


def Load_database(button_array):
    global database_path
    database_path = entry_Database_location.get()
    if file_exists_or_create():
        messagebox.showinfo(title="Load Database",
                            message="Databsase sucessfuly loaded")
    enable_buttons(button_array)


# Create the main window
root = Tk()
root.title("Main Window")
root.geometry("260x130")
# Creat widgets for main window
label = Label(root, text="This is a main window")
label_Database_location = Label(root, text="Database location")
entry_Database_location = Entry(root, width=40)
button_Load_database = Button(root, text="Load",
                              command=lambda: Load_database([Input_window_btn, Edit_window_btn, Output_window_btn]))
# Button to open a new window
Input_window_btn = Button(root, text="Input",
                          command=lambda: open_Input_window([Input_window_btn, Edit_window_btn, Output_window_btn, button_Load_database]))
Edit_window_btn = Button(root, text="Edit",
                         command=lambda: open_Edit_window([Input_window_btn, Edit_window_btn, Output_window_btn, button_Load_database]))
Output_window_btn = Button(root, text="Output",
                           command=lambda: open_Output_window([Input_window_btn, Edit_window_btn, Output_window_btn, button_Load_database]))
# Place widgets
disable_buttons([Input_window_btn, Edit_window_btn,
                Output_window_btn])
label.grid(row=0, column=0, columnspan=4)
Input_window_btn.grid(row=1, column=0)
Edit_window_btn.grid(row=1, column=1)
Output_window_btn.grid(row=1, column=3)
label_Database_location.grid(row=2, column=0, columnspan=4)
entry_Database_location.grid(row=3, column=0, columnspan=4)
button_Load_database.grid(row=4, column=0)
# Run the main loop
root.mainloop()
