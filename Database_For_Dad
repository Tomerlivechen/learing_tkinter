# -*- coding: utf-8 -*-
"""
Created on Sat Dec  2 17:03:26 2023

@author: tomer
"""
from tkinter import *
import os
import csv

global database_path
global internal_database
global loaded_database
internal_database = [["Cat1", "Cat2", "Cat3", "Cat4", "Cat5"]]


def disable_buttons(button_name_array):
    for button in button_name_array:
        button.config(state=DISABLED)


def enable_buttons(button_name_array):
    for button in button_name_array:
        button.config(state=NORMAL)

  # Load the database to internal storage


def sort_and_remove_duplicates(matrix):
    # Sort the matrix by columns
    sorted_matrix = sorted(matrix[1:], key=lambda row: (
        row[0], row[1], row[2], row[3], row[4]))
    # Remove duplicate rows
    unique_matrix = [sorted_matrix[0]]
    for i in range(1, len(sorted_matrix)):
        if tuple(sorted_matrix[i]) != tuple(sorted_matrix[i - 1]):
            unique_matrix.append(sorted_matrix[i])

    sorted_matrix_with_header = [matrix[0]] + unique_matrix
    return sorted_matrix_with_header


def load_csv_to_matrix(append):
    global database_path
    global internal_database
    if append == False:
        internal_database = [["Cat1", "Cat2", "Cat3", "Cat4", "Cat5"]]
    with open(database_path, 'r') as csv_file:
        csv_reader = csv.reader(csv_file)
        for row in csv_reader:
            internal_database.append(row)


# save the internal database to hard drive storage


def save_csv_to_drive():
    global database_path
    global internal_database
    load_csv_to_matrix(True)
    internal_database = sort_and_remove_duplicates(internal_database)
    with open(database_path, 'w', newline='') as csv_file:
        csv_writer = csv.writer(csv_file)
        csv_writer.writerows(internal_database)


# check if path exists


def file_exists_or_create():
    global database_path
    if os.path.exists(database_path):
        load_csv_to_matrix(False)
        return True
    else:
        with open(database_path, 'w', newline=''):
            messagebox.showinfo(title="Database created",
                                message="Database has been created")
            # Create an empty CSV file
            pass
        return False


def entery_test(entry_array):
    count = 0
    for entry_widget in entry_array:
        if len(entry_widget) != 0:
            count += 1
    if count < len(entry_array):
        messagebox.showinfo(title="Empty catagories",
                            message="You seem to have missed some of the catagories")
        return False
    return True


def enter_to_storage(entry_array, entry_widgets):
    global internal_database
    global report_text
    # check if all catagories are filled
    if entery_test(entry_array):

        # Clear Entry widget values
        for entry_widget in entry_widgets:
            entry_widget.delete(0, 'end')

        internal_database.append(entry_array)
        report_text.config(state=NORMAL)
        report_text.insert(
            END, f' {entry_array[0]}\t{entry_array[1]}\t{entry_array[2]}\t{entry_array[3]}\t{entry_array[4]}\n')
        report_text.config(state=DISABLED)
#        messagebox.showinfo(title="Entery Saved",
#                        message="Entry temporarily saved")
        Input_window.focus_set()


def enter_to_drive():
    save_csv_to_drive()
    messagebox.showinfo(title="Entery Saved",
                        message="List saved to hard drive")
    Input_window.focus_set()


def on_scroll(*args):
    report_text.yview(*args)


def open_Input_window(button_name_array):
    # Create the window
    global Input_window
    global internal_database
    Input_window = Toplevel(root)
    Input_window.title("Input window")
    Input_window.geometry("660x460")
    # Disable the button in the main window
    disable_buttons(button_name_array)
    Input_window.protocol("WM_DELETE_WINDOW",
                          lambda: on_new_window_close(Input_window, button_name_array))
    # Creat widgets for window
    label = Label(Input_window, text="This is Input window")
    label_Cat1 = Label(Input_window, text="This is the lable for catagory #1")
    label_Cat2 = Label(Input_window, text="This is the lable for catagory #2")
    label_Cat3 = Label(Input_window, text="This is the lable for catagory #3")
    label_Cat4 = Label(Input_window, text="This is the lable for catagory #4")
    label_Cat5 = Label(Input_window, text="This is the lable for catagory #5")
    entry_Cat1 = Entry(Input_window, width=20)
    entry_Cat2 = Entry(Input_window, width=20)
    entry_Cat3 = Entry(Input_window, width=20)
    entry_Cat4 = Entry(Input_window, width=20)
    entry_Cat5 = Entry(Input_window, width=20)
    button_Enter = Button(Input_window, text="Enter",
                          command=lambda: enter_to_storage([entry_Cat1.get(), entry_Cat2.get(), entry_Cat3.get(), entry_Cat4.get(), entry_Cat5.get()], [entry_Cat1, entry_Cat2, entry_Cat3, entry_Cat4, entry_Cat5]))
    button_Save = Button(Input_window, text="Save",
                         command=lambda: enter_to_drive())
    global report_text
    report_text = Text(Input_window, borderwidth=5, bd=3,
                       bg="gray", width=60, height=15)
    report_text.insert(
        "1.0", f'{internal_database[0][0]}\t{internal_database[0][1]}\t{internal_database[0][2]}\t{internal_database[0][3]}\t{internal_database[0][4]}\n')
    report_text.config(state=DISABLED)
    scrollbar = Scrollbar(Input_window, command=on_scroll)
    report_text.config(yscrollcommand=scrollbar.set)
    # Place widgets in window
    count_row = 0
    count_col = 0
    label.grid(row=count_row, column=0, columnspan=3)
    count_row += 1
    label_Cat1.grid(row=count_row, column=0)
    entry_Cat1.grid(row=count_row, column=1)
    count_row += 1
    label_Cat2.grid(row=count_row, column=0)
    entry_Cat2.grid(row=count_row, column=1)
    count_row += 1
    label_Cat3.grid(row=count_row, column=0)
    entry_Cat3.grid(row=count_row, column=1)
    count_row += 1
    label_Cat4.grid(row=count_row, column=0)
    entry_Cat4.grid(row=count_row, column=1)
    count_row += 1
    label_Cat5.grid(row=count_row, column=0)
    entry_Cat5.grid(row=count_row, column=1)
    count_row += 1
    button_Enter.grid(row=count_row, column=0)
    button_Save.grid(row=count_row, column=1)
    count_row += 1
    report_text.grid(row=count_row, column=0, columnspan=3)
    scrollbar.grid(row=count_row, column=3, sticky="ns")


def extract_column(matrix, column_index):
    return list(set(row[column_index] for row in matrix[1:]))


def set_catagory_values():
    global internal_database
    cat1_unique_Values = extract_column(internal_database, 0)
    cat2_unique_Values = extract_column(internal_database, 1)
    cat3_unique_Values = extract_column(internal_database, 2)
    cat4_unique_Values = extract_column(internal_database, 3)


def open_Edit_window(button_name_array):
    Edit_window = Toplevel(root)
    Edit_window.title("Edit_window")
    Edit_window.geometry("660x460")
    disable_buttons(button_name_array)
    Edit_window.protocol("WM_DELETE_WINDOW",
                         lambda: on_new_window_close(Edit_window, button_name_array))
    # Creat widgets for window
    label = Label(Edit_window, text="This is Edit window")
    label_Cat1 = Label(Edit_window, text="This is the lable for catagory #1")
    label_Cat2 = Label(Edit_window, text="This is the lable for catagory #2")
    label_Cat3 = Label(Edit_window, text="This is the lable for catagory #3")
    label_Cat4 = Label(Edit_window, text="This is the lable for catagory #4")
    label_Cat5 = Label(Edit_window, text="This is the lable for catagory #5")

    combo_Cat1 = Combobox(values=cat1_Values)
    combo_Cat2 = Combobox(values=cat2_Values)
    combo_Cat3 = Combobox(values=cat3_Values)
    combo_Cat4 = Combobox(values=cat4_Values)
    # Place widgets in window
    label.pack()


def open_Output_window(button_name_array):
    Output_window = Toplevel(root)
    Output_window.title("Output window")
    Output_window.geometry("660x460")

    label = Label(Output_window, text="This is Output window")
    label.pack()
    disable_buttons(button_name_array)
    Output_window.protocol("WM_DELETE_WINDOW",
                           lambda: on_new_window_close(Output_window, button_name_array))


def on_new_window_close(window_name, button_name_array):
    # Enable the button in the main window when the new window is closed
    enable_buttons(button_name_array)
    window_name.destroy()


def Load_database(button_array):
    global database_path
    database_path = entry_Database_location.get()
    if file_exists_or_create():
        messagebox.showinfo(title="Load Database",
                            message="Databsase sucessfuly loaded")
    enable_buttons(button_array)


# Create the main window
root = Tk()
root.title("Main Window")
root.geometry("660x460")
# Creat widgets for main window
label = Label(root, text="This is a main window")
label_Database_location = Label(root, text="Database location")
entry_Database_location = Entry(root, width=40)
button_Load_database = Button(root, text="Load",
                              command=lambda: Load_database([Input_window_btn, Edit_window_btn, Output_window_btn]))
# Button to open a new window
Input_window_btn = Button(root, text="Input",
                          command=lambda: open_Input_window([Input_window_btn, Edit_window_btn, Output_window_btn, button_Load_database]))
Edit_window_btn = Button(root, text="Edit",
                         command=lambda: open_Edit_window([Input_window_btn, Edit_window_btn, Output_window_btn, button_Load_database]))
Output_window_btn = Button(root, text="Output",
                           command=lambda: open_Output_window([Input_window_btn, Edit_window_btn, Output_window_btn, button_Load_database]))
# Place widgets
disable_buttons([Input_window_btn, Edit_window_btn,
                Output_window_btn])
label.grid(row=0, column=0, columnspan=4)
Input_window_btn.grid(row=1, column=0)
Edit_window_btn.grid(row=1, column=1)
Output_window_btn.grid(row=1, column=3)
label_Database_location.grid(row=2, column=0, columnspan=4)
entry_Database_location.grid(row=3, column=0, columnspan=4)
button_Load_database.grid(row=4, column=0)
# Run the main loop
root.mainloop()
